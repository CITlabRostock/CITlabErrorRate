# The ConfigTokenizer is used to tokenized strings. The main idea is that is being
# used with a configuration file. If different use cases call for different types
# of tokenization, the same tokenizer with different configuration files can be used.
# 
# Rules are:
# - Normalization
# - Dehyphanation signs
# - Delimiter signs
# - Delimiter signs being kept as tokens
# 
# Further explanation:
# 
# - Normalization:
# The Java normalizer tackles the representation problem of characters like \u00c3\u00a1 or \u00c3\u00b6. These
# characters can be represented as a single character (\u00c3\u00a1 or \u00c3\u00b6) or as a basic character
# with additional diacritic. The java normalizer changes the representation to either
# representation type.
# Further explanation can be found at: https://docs.oracle.com/javase/tutorial/i18n/text/normalizerapi.html

# normalizer=None
normalizer=NFC
# normalizer=NFD
# normalizer=NFKC
# normalizer=NFKD

# - Dehypenation signs
# When a word at the end of the line is being cut off and continued on the next line, there
# often is a hyphenation sign. The tokenizer looks for a given set of files, a following \n
# and a following small letter in the next line. If that expression is found, the split up
# word is being put together.

dehyphenation_signs=\u00e2\u0080\u0090-\u00c2\u00ac
  
# - Delimiter signs
# Delemiter are used for splitting tokens. Common signs among others are spaces, newlines
# and dots.

delimiter_signs=\n .,:;!?
 
# - Delimiter signs being kept as tokens
# When there is a token like 'is, ', the user may be interested in getting 'is' as a token
# and the comma as a dedicated token.

keep_delimiter_signs=,.:;!?

# boolean flag whether to tokenize on character level
# default value is false in order to tokenize on word level

tokenize_character_wise=false
